#!/bin/bash

# Remote script to install these dotfiles on a system

# Objectives:
# - Install spaceship prompt via oh-my-zsh plugin (npm won't work)
# - Can run > 1 w/o damage
# - Hands-off (no passwords or prompts)
# - Running > 1 upgrades everything
# - Can select individial tasks (Make?)

# setup ------------------------------------------------------------------------

set -e
export PATH="$HOME/bin:$PATH"

system_type=$(uname -s)
dotfiles_url="https://robatron@bitbucket.org/robatron/dotfiles.git"
git_install_dir=$HOME/opt
yadm_repo_dir=$HOME/.yadm

function log() {
    echo ">>> $1"
}

function logw() {
    echo "!!! $1"
}

function logr() {
    read -p "??? $1 (y/n) " -r
}

function assure_installed_mac() {
    log "Looking for $1..."
    if ! [ -x "$(command -v $1)" ]; then
        log "'$1' not installed. Attempting to install..."
        brew install $1
    fi
}

function assure_installed_linux() {
    log "Looking for $1..."
    if ! [ -x "$(command -v $1)" ]; then
        log "'$1' not installed. Attempting to install..."
        sudo apt install -y $1
    fi
}

function install_program_via_git() {
    git_url=$1
    install_dir=$2

    log "Installing $git_url to $install_dir"

    install_via_git() {
        mkdir -p $(dirname $install_dir)
        git clone $git_url $install_dir
    };

    if [ -d $install_dir ]; then

        logr "Installation directory $install_dir is not empty! Overwrite and reinstall?"
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            rm -rf $install_dir
            install_via_git
        else
            logw "Program not installed: $git_url"
        fi
    else
        install_via_git
    fi
}

# bootstrap --------------------------------------------------------------------

log "Bootstrapping..."

log "Looking for system target managers..."
if [ "$system_type" = "Darwin" ]; then

    log "Mac OS X detected. Looking for brew..."
    if ! [ -x "$(command -v brew)" ]; then
        log "Homebrew missing. Installing homebrew..."
        /usr/bin/ruby -e \
            "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi

    assure_installed_mac git
    assure_installed_mac python3

elif [ "$system_type" = "Linux" ]; then

    log "Linux detected. Looking for apt..."
    if ! [ -x "$(command -v apt)" ]; then
        logw  "apt isn't available and I don't know what to do :-("
        exit 1
    fi

    assure_installed_linux git
    assure_installed_linux python3
    assure_installed_linux python3-distutils
fi

seek_prog='pip'
log "Looking for $seek_prog..."
if ! [ -x "$(command -v $seek_prog)" ]; then
    log "$seek_prog missing. Installing..."
    sudo curl https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py
    sudo -H python3 /tmp/get-pip.py
fi

# Envtpl required by yadm
seek_prog='envtpl'
log "Looking for $seek_prog..."
if ! [ -x "$(command -v $seek_prog)" ]; then
    log "$seek_prog missing. Installing..."
    sudo -H pip install envtpl
fi

seek_prog='yadm'
log "Looking for $seek_prog..."
if ! [ -x "$(command -v $seek_prog)" ]; then
    log "$seek_prog missing. Installing..."
    install_program_via_git "https://github.com/TheLocehiliosan/yadm.git" $git_install_dir/yadm
    log "Adding $seek_prog bin to path..."
    mkdir -p $HOME/bin
    ln -sf $git_install_dir/yadm/yadm $HOME/bin/
fi

log "Cloning dotfiles..."
if [ -d $yadm_repo_dir ]; then
    logw "$yadm_repo_dir exists. Using existing dotfiles. (Do 'yadm pull' to update)"
else
    yadm clone $dotfiles_url
fi

# install programs -------------------------------------------------------------

log "Installing system-specific programs..."

if [ "$system_type" = "Darwin" ]; then
    log "Mac OS X detected. Looking for brewfile..."

    if [ -f "$HOME/.Brewfile" ]; then
        log "Installing programs specified in .Brewfile..."
        brew bundle --global # Consolodate from .Brewfile?

        if [ ! -z $INSTALL_GUI_PROGS ]; then
            log "Installing GUI programs..."
            brew cask install \
                deluge \
                google-chrome \
                iterm2 \
                keepingyouawake \
                spectacle \
                vagrant \
                virtualbox \
                visual-studio-code
        else
            logw "Skipping GUI program installations..."
        fi
    fi

elif [ "$system_type" = "Linux" ]; then
    log "Linux detected. Looking for apt..."

    packages_to_install="neovim gpg zsh cowsay fortune-mod"

    if [ -x "$(command -v apt)" ]; then
        log "Installing packages via apt..."
        sudo apt install -y $packages_to_install
        ln -sf $(which shuf) $HOME/bin/gshuf # normalize shuf between systems
    else
        logw "Can't install packages via apt and I don't know what to do :-("
        exit 1;
    fi

    seek_prog="pyenv"
    log "Looking for $seek_prog..."
    if [ ! -x "$(command -v $seek_prog)" ]; then
        log "Installing $seek_prog..."

        # See https://github.com/pyenv/pyenv-installer
        curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
    fi
fi

log "Installing common programs..."

seek_prog="nvm"
log "Looking for $seek_prog..."
export NVM_DIR="$HOME/.$seek_prog"
if [ ! -d $NVM_DIR ]; then
    # See https://github.com/creationix/nvm#manual-install
    git clone https://github.com/creationix/nvm.git "$NVM_DIR"
    cd "$NVM_DIR"
    git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`

    log "Loading $seek_prog"
    . "$NVM_DIR/nvm.sh"

    log "Installing latest LTS version of node..."
    nvm install --lts
fi

seek_prog="oh-my-zsh"
log "Looking for $seek_prog..."
export OMZSH_DIR="$HOME/.$seek_prog"
if [ ! -d $OMZSH_DIR ]; then
    log "Installing $seek_prog..."

    # Sed is to chop out starting ZSH so it doesn't interrupt our installation
    curl https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh \
        | sed "s/exec zsh -l.*$//g" \
        > /tmp/install-$seek_prog
    bash /tmp/install-$seek_prog

    if [ -f "$HOME/.zshrc.pre-oh-my-zsh" ]; then
        log "Fixup .zshrc files..."
        cp $HOME/.zshrc.pre-oh-my-zsh $HOME/.zshrc
    fi
fi

seek_prog="spaceship-prompt"
log "Looking for $seek_prog..."
export SPACESHIP_THEME_DIR="$OMZSH_DIR/themes/spaceship-prompt"
if [ ! -d $SPACESHIP_THEME_DIR ]; then
    log "Installing $seek_prog..."
    git clone https://github.com/denysdovhan/spaceship-prompt.git $SPACESHIP_THEME_DIR
    ln -s "$SPACESHIP_THEME_DIR/spaceship.zsh-theme" "$OMZSH_DIR/themes/spaceship.zsh-theme"
fi

# Powerline fonts are for spaceship-prompt
seek_prog="powerline"
log "Looking for $seek_prog..."
if [ ! -d "$git_install_dir/$seek_prog" ]; then
    log "Installing $seek_prog..."
    if [ -d "$HOME/.local" ]; then
        sudo chown -R $USER: $HOME/.local
    fi
    install_program_via_git "https://github.com/powerline/fonts.git" $git_install_dir/$seek_prog
    $git_install_dir/$seek_prog/install.sh
fi

# setup ------------------------------------------------------------------------

log "Updating the dotfiles repo origin URL to use SSH..."
yadm remote set-url origin "git@bitbucket.org:robatron/dotfiles.git"

log "Decrypting dotfiles..."
yadm decrypt

log "Automated installation phase complete! To complete installation:"
log "  - Open a new terminal window"
log '  - (Optional) If this is a Zillow machine, run `yadm config local.class zillow`'
log '  - Run `yadm alt` to render config files'
